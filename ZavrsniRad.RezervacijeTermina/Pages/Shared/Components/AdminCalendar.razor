@page "/calendar"

@using Blazorise
@using System
@using System.Globalization
@using System.Linq
@using ZavrsniRad.RezervacijeTermina.Data.Models

<h3>Calendar</h3>

<div Class="maxHeight">
    <Button Color="Color.Primary" Clicked="@WeekBefore">Before</Button>
    <Button Color="Color.Primary" Clicked="@WeekAfter">After</Button>
    <Container>
        @*Make Header*@
        <Row>
            <Column>
                @*empty column for times*@
            </Column>
            @foreach (var day in DaysOfTheWeek.Select((x, i) => new { Value = x, Index = i }))
            {
                <Column Class="@(FirstDay.AddDays(day.Index).Date == Today.Date ? "todayBolded" : "")">
                    @day.Value
                    @FirstDay.AddDays(day.Index).ToString("dd.MM.yyyy")
                </Column>
            }
        </Row>

        @*Make RestOfThe grid*@
        @foreach (var hour in HoursOfTheDay)
        {
            <Row>
                <Column>
                    <p>@hour</p>
                </Column>
                @foreach (var day in DaysOfTheWeek.Select((x, i) => new { Value = x, Index = i }))
                {
                    <Column @onclick="() => OpenPopupForAdministration(day.Index, hour)">
                        <p></p>
                    </Column>
                }
            </Row>
        }
    </Container>
</div>

<style>
    .todayBolded {
        /*ADD BORDERS TO TODAY*/
        font-weight: bold
    }

    .maxHeight {
        height: 499px;
        max-height: 500px;
    }
</style>

@code {

    ReservationEvent ReservationEvent;

    DateTime FirstDay;
    DateTime Today;
    List<string> DaysOfTheWeek;
    List<string> HoursOfTheDay;
    int numberOfHoursInADay = 24;

    protected override async Task OnInitializedAsync()
    {
        Today = DateTime.Now;
        FirstDay = GetModayAccordingTo(Today);
        DaysOfTheWeek = InitializeDaysOfTheWeek();
        HoursOfTheDay = InitializeHoursOfTheDay();
    }

    private List<string> InitializeDaysOfTheWeek()
    {
        return new List<string>{
            "Ponedjeljak",
            "Utorak",
            "Srijeda",
            "Četvrtak",
            "Petak",
            "Subota",
            "Nedjelja"
          };
    }

    private List<string> InitializeHoursOfTheDay()
    {
        var hours = new List<string>();

        var day = DateTime.Now.Date;

        while (day.Date == DateTime.Now.Date)
        {
            hours.Add(day.ToString("HH:mm"));
            day = day.AddHours(1);
        }

        return hours;
    }

    private DateTime GetModayAccordingTo(DateTime now)
    {
        int delta = DayOfWeek.Monday - now.DayOfWeek;
        if (delta > 0)
            delta -= 7;
        DateTime monday = now.AddDays(delta);

        return monday;
    }

    private void WeekBefore()
    {
        FirstDay = GetModayAccordingTo(FirstDay.AddDays(-7));

    }

    private void WeekAfter()
    {
        FirstDay = GetModayAccordingTo(FirstDay.AddDays(7));
    }

    private void OpenPopupForAdministration(int dayIndex, string hour)
    {
        var selectedDate = FirstDay.AddDays(dayIndex);
        var selectedTime = DateTime.ParseExact(hour, "HH:mm", CultureInfo.InvariantCulture);

        var selectedDateTime = new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, selectedTime.Hour, selectedTime.Minute, 0);

        var reservationPeriod = new ReservationPeriod
            (
                 selectedDateTime,
                 selectedDateTime.AddHours(1),
                 ReservationEvent.IsReservationConfirmationNeeded ? false : true,
                 ReservationPeriodType.Closed,
                 ReservationEvent.UserId,
                 ReservationEvent.Id
            );
    }
}