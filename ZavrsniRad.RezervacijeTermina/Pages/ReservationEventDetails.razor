@page "/details/{id}"

@using Blazorise
@using ZavrsniRad.RezervacijeTermina.Data.Models
@using ZavrsniRad.RezervacijeTermina.Data.Services
@using ZavrsniRad.RezervacijeTermina.Data.Messaging.ReservationEvent.Request
@using ZavrsniRad.RezervacijeTermina.Pages.Shared.Components
@using System
@using System.IO;
@using System.Security.Claims
@using System.Text;
@using Pages.Shared.Components

@attribute [Authorize]
@inject IReservationService ReservationService

@if (IsLoading)
{
    <div class="spinner"></div>
}
else
{
    <Card Margin="Margin.Is4.OnY">
        <CardBody>
            <CardTitle Size="5">@ReservationEvent.Caption</CardTitle>
            <br />
            <CardText>
                <Container>
                    <Row>
                        <Column>
                            <Row>@ReservationEvent.Description</Row>
                            <br />
                            <Row>Kontakt: @ReservationEvent?.User?.UserName (@ReservationEvent.AdditionalContact)</Row>
                            <Row>
                                Aktivno: Od @ReservationEvent.ActiveFrom.ToString("dd.MM.yyyy") @if (ReservationEvent.ActiveTo != null)
                                {<span> Do @ReservationEvent.ActiveTo.Value.ToString("dd.MM.yyyy") </span>}
                            </Row>
                            <br/>
                            @if (ReservationEvent.CanUserMakeReservation)
                            {
                                <Row><i class="fas fa-exclamation-triangle"></i> Korisnik može sam napraviti rezervaciju u nekom od slobodnih termina</Row>
                                @if (ReservationEvent.IsReservationConfirmationNeeded)
                                {
                                    <Row><i class="fas fa-exclamation-triangle"></i> Vlasnik termina mora potvrditi rezervaciju.</Row>
                                }
                            }
                            else
                            {
                                <Row><i class="fas fa-exclamation-triangle"></i> Potrebno je kontaktirati vlasnika za dogovor rezervacije</Row>
                            }
                        </Column>
                        @if (ReservationEvent.AttachmentLogo != null)
                        {
                            <Column>
                                <img src="data:image/png;base64,@ReservationEvent.AttachmentLogo.Content" class="centerI" />
                            </Column>
                        }
                    </Row>
                </Container>
                <br />
                <CalendarScheduler ReservationEvent=@ReservationEvent IsOwner=@IsOwner UserId=@UserId UserName=@UserName></CalendarScheduler>
            </CardText>
        </CardBody>
    </Card>

    @if (showPopup)
    {
        <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="titleLabel">Response</h5>
                        <button type="button" class="close" @onclick="@ClosePopup" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @ErrorMessage
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="@ClosePopup" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

}

<style>

    i {
        margin-right: 5px;
        line-height: 1.5 !important;
    }

    .imageContainer {
        height: 200px;
    }

    .centerI {
      display: block;
      margin-left: auto;
      margin-right: auto;
      max-height:250px;
    }

        .imageContainer img {
            max-width: 100%;
            max-height: 100%;
        }
</style>

@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    ReservationEvent ReservationEvent;
    string UserId;
    string UserName;

    bool IsOwner;
    string ErrorMessage;
    bool showPopup;
    bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        UserId = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
        UserName = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;

        var response = await ReservationService.GetReservationEventByIdAsync
            (
            new GetReservationEventRequest
            {
                Id = Convert.ToInt64(Id),
                UserId = UserId
            }
            );

        if (response.Success)
        {
            ReservationEvent = response.ReservationEvent;

            if (ReservationEvent != null)
            {
                if (UserId == ReservationEvent.UserId)
                {
                    IsOwner = true;
                }

                IsLoading = false;
            }
        }
        else
        {
            ShowPopupWithErrorMessage(response.ErrorMessage);
        }
    }

    void ShowPopupWithErrorMessage(string message)
    {
        ErrorMessage = message;
        showPopup = true;
    }

    void ClosePopup()
    {
        showPopup = false;
    }

}